{
  "version": 3,
  "sources": ["../../node_modules/primevue/utils/utils.esm.js"],
  "sourcesContent": ["var DomHandler = {\n    innerWidth(el) {\n        if (el) {\n            let width = el.offsetWidth;\n            let style = getComputedStyle(el);\n\n            width += parseFloat(style.paddingLeft) + parseFloat(style.paddingRight);\n\n            return width;\n        }\n\n        return 0;\n    },\n\n    width(el) {\n        if (el) {\n            let width = el.offsetWidth;\n            let style = getComputedStyle(el);\n\n            width -= parseFloat(style.paddingLeft) + parseFloat(style.paddingRight);\n\n            return width;\n        }\n\n        return 0;\n    },\n\n    getWindowScrollTop() {\n        let doc = document.documentElement;\n\n        return (window.pageYOffset || doc.scrollTop) - (doc.clientTop || 0);\n    },\n\n    getWindowScrollLeft() {\n        let doc = document.documentElement;\n\n        return (window.pageXOffset || doc.scrollLeft) - (doc.clientLeft || 0);\n    },\n\n    getOuterWidth(el, margin) {\n        if (el) {\n            let width = el.offsetWidth;\n\n            if (margin) {\n                let style = getComputedStyle(el);\n\n                width += parseFloat(style.marginLeft) + parseFloat(style.marginRight);\n            }\n\n            return width;\n        }\n\n        return 0;\n    },\n\n    getOuterHeight(el, margin) {\n        if (el) {\n            let height = el.offsetHeight;\n\n            if (margin) {\n                let style = getComputedStyle(el);\n\n                height += parseFloat(style.marginTop) + parseFloat(style.marginBottom);\n            }\n\n            return height;\n        }\n\n        return 0;\n    },\n\n    getClientHeight(el, margin) {\n        if (el) {\n            let height = el.clientHeight;\n\n            if (margin) {\n                let style = getComputedStyle(el);\n\n                height += parseFloat(style.marginTop) + parseFloat(style.marginBottom);\n            }\n\n            return height;\n        }\n\n        return 0;\n    },\n\n    getViewport() {\n        let win = window,\n            d = document,\n            e = d.documentElement,\n            g = d.getElementsByTagName('body')[0],\n            w = win.innerWidth || e.clientWidth || g.clientWidth,\n            h = win.innerHeight || e.clientHeight || g.clientHeight;\n\n        return { width: w, height: h };\n    },\n\n    getOffset(el) {\n        if (el) {\n            let rect = el.getBoundingClientRect();\n\n            return {\n                top: rect.top + (window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0),\n                left: rect.left + (window.pageXOffset || document.documentElement.scrollLeft || document.body.scrollLeft || 0)\n            };\n        }\n\n        return {\n            top: 'auto',\n            left: 'auto'\n        };\n    },\n\n    index(element) {\n        if (element) {\n            let children = element.parentNode.childNodes;\n            let num = 0;\n\n            for (let i = 0; i < children.length; i++) {\n                if (children[i] === element) return num;\n                if (children[i].nodeType === 1) num++;\n            }\n        }\n\n        return -1;\n    },\n\n    addMultipleClasses(element, className) {\n        if (element && className) {\n            if (element.classList) {\n                let styles = className.split(' ');\n\n                for (let i = 0; i < styles.length; i++) {\n                    element.classList.add(styles[i]);\n                }\n            } else {\n                let styles = className.split(' ');\n\n                for (let i = 0; i < styles.length; i++) {\n                    element.className += ' ' + styles[i];\n                }\n            }\n        }\n    },\n\n    addClass(element, className) {\n        if (element && className) {\n            if (element.classList) element.classList.add(className);\n            else element.className += ' ' + className;\n        }\n    },\n\n    removeClass(element, className) {\n        if (element && className) {\n            if (element.classList) element.classList.remove(className);\n            else element.className = element.className.replace(new RegExp('(^|\\\\b)' + className.split(' ').join('|') + '(\\\\b|$)', 'gi'), ' ');\n        }\n    },\n\n    hasClass(element, className) {\n        if (element) {\n            if (element.classList) return element.classList.contains(className);\n            else return new RegExp('(^| )' + className + '( |$)', 'gi').test(element.className);\n        }\n\n        return false;\n    },\n\n    find(element, selector) {\n        return this.isElement(element) ? element.querySelectorAll(selector) : [];\n    },\n\n    findSingle(element, selector) {\n        return this.isElement(element) ? element.querySelector(selector) : null;\n    },\n\n    getHeight(el) {\n        if (el) {\n            let height = el.offsetHeight;\n            let style = getComputedStyle(el);\n\n            height -= parseFloat(style.paddingTop) + parseFloat(style.paddingBottom) + parseFloat(style.borderTopWidth) + parseFloat(style.borderBottomWidth);\n\n            return height;\n        }\n\n        return 0;\n    },\n\n    getWidth(el) {\n        if (el) {\n            let width = el.offsetWidth;\n            let style = getComputedStyle(el);\n\n            width -= parseFloat(style.paddingLeft) + parseFloat(style.paddingRight) + parseFloat(style.borderLeftWidth) + parseFloat(style.borderRightWidth);\n\n            return width;\n        }\n\n        return 0;\n    },\n\n    absolutePosition(element, target) {\n        if (element) {\n            let elementDimensions = element.offsetParent ? { width: element.offsetWidth, height: element.offsetHeight } : this.getHiddenElementDimensions(element);\n            let elementOuterHeight = elementDimensions.height;\n            let elementOuterWidth = elementDimensions.width;\n            let targetOuterHeight = target.offsetHeight;\n            let targetOuterWidth = target.offsetWidth;\n            let targetOffset = target.getBoundingClientRect();\n            let windowScrollTop = this.getWindowScrollTop();\n            let windowScrollLeft = this.getWindowScrollLeft();\n            let viewport = this.getViewport();\n            let top, left;\n\n            if (targetOffset.top + targetOuterHeight + elementOuterHeight > viewport.height) {\n                top = targetOffset.top + windowScrollTop - elementOuterHeight;\n                element.style.transformOrigin = 'bottom';\n\n                if (top < 0) {\n                    top = windowScrollTop;\n                }\n            } else {\n                top = targetOuterHeight + targetOffset.top + windowScrollTop;\n                element.style.transformOrigin = 'top';\n            }\n\n            if (targetOffset.left + elementOuterWidth > viewport.width) left = Math.max(0, targetOffset.left + windowScrollLeft + targetOuterWidth - elementOuterWidth);\n            else left = targetOffset.left + windowScrollLeft;\n\n            element.style.top = top + 'px';\n            element.style.left = left + 'px';\n        }\n    },\n\n    relativePosition(element, target) {\n        if (element) {\n            let elementDimensions = element.offsetParent ? { width: element.offsetWidth, height: element.offsetHeight } : this.getHiddenElementDimensions(element);\n            const targetHeight = target.offsetHeight;\n            const targetOffset = target.getBoundingClientRect();\n            const viewport = this.getViewport();\n            let top, left;\n\n            if (targetOffset.top + targetHeight + elementDimensions.height > viewport.height) {\n                top = -1 * elementDimensions.height;\n                element.style.transformOrigin = 'bottom';\n\n                if (targetOffset.top + top < 0) {\n                    top = -1 * targetOffset.top;\n                }\n            } else {\n                top = targetHeight;\n                element.style.transformOrigin = 'top';\n            }\n\n            if (elementDimensions.width > viewport.width) {\n                // element wider then viewport and cannot fit on screen (align at left side of viewport)\n                left = targetOffset.left * -1;\n            } else if (targetOffset.left + elementDimensions.width > viewport.width) {\n                // element wider then viewport but can be fit on screen (align at right side of viewport)\n                left = (targetOffset.left + elementDimensions.width - viewport.width) * -1;\n            } else {\n                // element fits on screen (align with target)\n                left = 0;\n            }\n\n            element.style.top = top + 'px';\n            element.style.left = left + 'px';\n        }\n    },\n\n    getParents(element, parents = []) {\n        return element['parentNode'] === null ? parents : this.getParents(element.parentNode, parents.concat([element.parentNode]));\n    },\n\n    getScrollableParents(element) {\n        let scrollableParents = [];\n\n        if (element) {\n            let parents = this.getParents(element);\n            const overflowRegex = /(auto|scroll)/;\n\n            const overflowCheck = (node) => {\n                let styleDeclaration = window['getComputedStyle'](node, null);\n\n                return overflowRegex.test(styleDeclaration.getPropertyValue('overflow')) || overflowRegex.test(styleDeclaration.getPropertyValue('overflowX')) || overflowRegex.test(styleDeclaration.getPropertyValue('overflowY'));\n            };\n\n            for (let parent of parents) {\n                let scrollSelectors = parent.nodeType === 1 && parent.dataset['scrollselectors'];\n\n                if (scrollSelectors) {\n                    let selectors = scrollSelectors.split(',');\n\n                    for (let selector of selectors) {\n                        let el = this.findSingle(parent, selector);\n\n                        if (el && overflowCheck(el)) {\n                            scrollableParents.push(el);\n                        }\n                    }\n                }\n\n                if (parent.nodeType !== 9 && overflowCheck(parent)) {\n                    scrollableParents.push(parent);\n                }\n            }\n        }\n\n        return scrollableParents;\n    },\n\n    getHiddenElementOuterHeight(element) {\n        if (element) {\n            element.style.visibility = 'hidden';\n            element.style.display = 'block';\n            let elementHeight = element.offsetHeight;\n\n            element.style.display = 'none';\n            element.style.visibility = 'visible';\n\n            return elementHeight;\n        }\n\n        return 0;\n    },\n\n    getHiddenElementOuterWidth(element) {\n        if (element) {\n            element.style.visibility = 'hidden';\n            element.style.display = 'block';\n            let elementWidth = element.offsetWidth;\n\n            element.style.display = 'none';\n            element.style.visibility = 'visible';\n\n            return elementWidth;\n        }\n\n        return 0;\n    },\n\n    getHiddenElementDimensions(element) {\n        if (element) {\n            let dimensions = {};\n\n            element.style.visibility = 'hidden';\n            element.style.display = 'block';\n            dimensions.width = element.offsetWidth;\n            dimensions.height = element.offsetHeight;\n            element.style.display = 'none';\n            element.style.visibility = 'visible';\n\n            return dimensions;\n        }\n\n        return 0;\n    },\n\n    fadeIn(element, duration) {\n        if (element) {\n            element.style.opacity = 0;\n\n            let last = +new Date();\n            let opacity = 0;\n\n            let tick = function () {\n                opacity = +element.style.opacity + (new Date().getTime() - last) / duration;\n                element.style.opacity = opacity;\n                last = +new Date();\n\n                if (+opacity < 1) {\n                    (window.requestAnimationFrame && requestAnimationFrame(tick)) || setTimeout(tick, 16);\n                }\n            };\n\n            tick();\n        }\n    },\n\n    fadeOut(element, ms) {\n        if (element) {\n            let opacity = 1,\n                interval = 50,\n                duration = ms,\n                gap = interval / duration;\n\n            let fading = setInterval(() => {\n                opacity -= gap;\n\n                if (opacity <= 0) {\n                    opacity = 0;\n                    clearInterval(fading);\n                }\n\n                element.style.opacity = opacity;\n            }, interval);\n        }\n    },\n\n    getUserAgent() {\n        return navigator.userAgent;\n    },\n\n    appendChild(element, target) {\n        if (this.isElement(target)) target.appendChild(element);\n        else if (target.el && target.elElement) target.elElement.appendChild(element);\n        else throw new Error('Cannot append ' + target + ' to ' + element);\n    },\n\n    isElement(obj) {\n        return typeof HTMLElement === 'object' ? obj instanceof HTMLElement : obj && typeof obj === 'object' && obj !== null && obj.nodeType === 1 && typeof obj.nodeName === 'string';\n    },\n\n    scrollInView(container, item) {\n        let borderTopValue = getComputedStyle(container).getPropertyValue('borderTopWidth');\n        let borderTop = borderTopValue ? parseFloat(borderTopValue) : 0;\n        let paddingTopValue = getComputedStyle(container).getPropertyValue('paddingTop');\n        let paddingTop = paddingTopValue ? parseFloat(paddingTopValue) : 0;\n        let containerRect = container.getBoundingClientRect();\n        let itemRect = item.getBoundingClientRect();\n        let offset = itemRect.top + document.body.scrollTop - (containerRect.top + document.body.scrollTop) - borderTop - paddingTop;\n        let scroll = container.scrollTop;\n        let elementHeight = container.clientHeight;\n        let itemHeight = this.getOuterHeight(item);\n\n        if (offset < 0) {\n            container.scrollTop = scroll + offset;\n        } else if (offset + itemHeight > elementHeight) {\n            container.scrollTop = scroll + offset - elementHeight + itemHeight;\n        }\n    },\n\n    clearSelection() {\n        if (window.getSelection) {\n            if (window.getSelection().empty) {\n                window.getSelection().empty();\n            } else if (window.getSelection().removeAllRanges && window.getSelection().rangeCount > 0 && window.getSelection().getRangeAt(0).getClientRects().length > 0) {\n                window.getSelection().removeAllRanges();\n            }\n        } else if (document['selection'] && document['selection'].empty) {\n            try {\n                document['selection'].empty();\n            } catch (error) {\n                //ignore IE bug\n            }\n        }\n    },\n\n    getSelection() {\n        if (window.getSelection) return window.getSelection().toString();\n        else if (document.getSelection) return document.getSelection().toString();\n        else if (document['selection']) return document['selection'].createRange().text;\n\n        return null;\n    },\n\n    calculateScrollbarWidth() {\n        if (this.calculatedScrollbarWidth != null) return this.calculatedScrollbarWidth;\n\n        let scrollDiv = document.createElement('div');\n\n        scrollDiv.className = 'p-scrollbar-measure';\n        document.body.appendChild(scrollDiv);\n\n        let scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;\n\n        document.body.removeChild(scrollDiv);\n\n        this.calculatedScrollbarWidth = scrollbarWidth;\n\n        return scrollbarWidth;\n    },\n\n    getBrowser() {\n        if (!this.browser) {\n            let matched = this.resolveUserAgent();\n\n            this.browser = {};\n\n            if (matched.browser) {\n                this.browser[matched.browser] = true;\n                this.browser['version'] = matched.version;\n            }\n\n            if (this.browser['chrome']) {\n                this.browser['webkit'] = true;\n            } else if (this.browser['webkit']) {\n                this.browser['safari'] = true;\n            }\n        }\n\n        return this.browser;\n    },\n\n    resolveUserAgent() {\n        let ua = navigator.userAgent.toLowerCase();\n        let match = /(chrome)[ ]([\\w.]+)/.exec(ua) || /(webkit)[ ]([\\w.]+)/.exec(ua) || /(opera)(?:.*version|)[ ]([\\w.]+)/.exec(ua) || /(msie) ([\\w.]+)/.exec(ua) || (ua.indexOf('compatible') < 0 && /(mozilla)(?:.*? rv:([\\w.]+)|)/.exec(ua)) || [];\n\n        return {\n            browser: match[1] || '',\n            version: match[2] || '0'\n        };\n    },\n\n    isVisible(element) {\n        return element && element.offsetParent != null;\n    },\n\n    invokeElementMethod(element, methodName, args) {\n        element[methodName].apply(element, args);\n    },\n\n    isExist(element) {\n        return !!(element !== null && typeof element !== 'undefined' && element.nodeName && element.parentNode);\n    },\n\n    isClient() {\n        return !!(typeof window !== 'undefined' && window.document && window.document.createElement);\n    },\n\n    focus(el, options) {\n        el && document.activeElement !== el && el.focus(options);\n    },\n\n    isFocusableElement(element, selector = '') {\n        return this.isElement(element)\n            ? element.matches(`button:not([tabindex = \"-1\"]):not([disabled]):not([style*=\"display:none\"]):not([hidden])${selector},\n                [href][clientHeight][clientWidth]:not([tabindex = \"-1\"]):not([disabled]):not([style*=\"display:none\"]):not([hidden])${selector},\n                input:not([tabindex = \"-1\"]):not([disabled]):not([style*=\"display:none\"]):not([hidden])${selector},\n                select:not([tabindex = \"-1\"]):not([disabled]):not([style*=\"display:none\"]):not([hidden])${selector},\n                textarea:not([tabindex = \"-1\"]):not([disabled]):not([style*=\"display:none\"]):not([hidden])${selector},\n                [tabIndex]:not([tabIndex = \"-1\"]):not([disabled]):not([style*=\"display:none\"]):not([hidden])${selector},\n                [contenteditable]:not([tabIndex = \"-1\"]):not([disabled]):not([style*=\"display:none\"]):not([hidden])${selector}`)\n            : false;\n    },\n\n    getFocusableElements(element, selector = '') {\n        let focusableElements = this.find(\n            element,\n            `button:not([tabindex = \"-1\"]):not([disabled]):not([style*=\"display:none\"]):not([hidden])${selector},\n                [href][clientHeight][clientWidth]:not([tabindex = \"-1\"]):not([disabled]):not([style*=\"display:none\"]):not([hidden])${selector},\n                input:not([tabindex = \"-1\"]):not([disabled]):not([style*=\"display:none\"]):not([hidden])${selector},\n                select:not([tabindex = \"-1\"]):not([disabled]):not([style*=\"display:none\"]):not([hidden])${selector},\n                textarea:not([tabindex = \"-1\"]):not([disabled]):not([style*=\"display:none\"]):not([hidden])${selector},\n                [tabIndex]:not([tabIndex = \"-1\"]):not([disabled]):not([style*=\"display:none\"]):not([hidden])${selector},\n                [contenteditable]:not([tabIndex = \"-1\"]):not([disabled]):not([style*=\"display:none\"]):not([hidden])${selector}`\n        );\n\n        let visibleFocusableElements = [];\n\n        for (let focusableElement of focusableElements) {\n            if (getComputedStyle(focusableElement).display != 'none' && getComputedStyle(focusableElement).visibility != 'hidden') visibleFocusableElements.push(focusableElement);\n        }\n\n        return visibleFocusableElements;\n    },\n\n    getFirstFocusableElement(element, selector) {\n        const focusableElements = this.getFocusableElements(element, selector);\n\n        return focusableElements.length > 0 ? focusableElements[0] : null;\n    },\n\n    getLastFocusableElement(element, selector) {\n        const focusableElements = this.getFocusableElements(element, selector);\n\n        return focusableElements.length > 0 ? focusableElements[focusableElements.length - 1] : null;\n    },\n\n    getNextFocusableElement(container, element, selector) {\n        const focusableElements = this.getFocusableElements(container, selector);\n        const index = focusableElements.length > 0 ? focusableElements.findIndex((el) => el === element) : -1;\n        const nextIndex = index > -1 && focusableElements.length >= index + 1 ? index + 1 : -1;\n\n        return nextIndex > -1 ? focusableElements[nextIndex] : null;\n    },\n\n    isClickable(element) {\n        if (element) {\n            const targetNode = element.nodeName;\n            const parentNode = element.parentElement && element.parentElement.nodeName;\n\n            return (\n                targetNode === 'INPUT' ||\n                targetNode === 'TEXTAREA' ||\n                targetNode === 'BUTTON' ||\n                targetNode === 'A' ||\n                parentNode === 'INPUT' ||\n                parentNode === 'TEXTAREA' ||\n                parentNode === 'BUTTON' ||\n                parentNode === 'A' ||\n                !!element.closest('.p-button, .p-checkbox, .p-radiobutton')\n            );\n        }\n\n        return false;\n    },\n\n    applyStyle(element, style) {\n        if (typeof style === 'string') {\n            element.style.cssText = style;\n        } else {\n            for (let prop in style) {\n                element.style[prop] = style[prop];\n            }\n        }\n    },\n\n    isIOS() {\n        return /iPad|iPhone|iPod/.test(navigator.userAgent) && !window['MSStream'];\n    },\n\n    isAndroid() {\n        return /(android)/i.test(navigator.userAgent);\n    },\n\n    isTouchDevice() {\n        return 'ontouchstart' in window || navigator.maxTouchPoints > 0 || navigator.msMaxTouchPoints > 0;\n    },\n\n    exportCSV(csv, filename) {\n        let blob = new Blob([csv], {\n            type: 'application/csv;charset=utf-8;'\n        });\n\n        if (window.navigator.msSaveOrOpenBlob) {\n            navigator.msSaveOrOpenBlob(blob, filename + '.csv');\n        } else {\n            let link = document.createElement('a');\n\n            if (link.download !== undefined) {\n                link.setAttribute('href', URL.createObjectURL(blob));\n                link.setAttribute('download', filename + '.csv');\n                link.style.display = 'none';\n                document.body.appendChild(link);\n                link.click();\n                document.body.removeChild(link);\n            } else {\n                csv = 'data:text/csv;charset=utf-8,' + csv;\n                window.open(encodeURI(csv));\n            }\n        }\n    }\n};\n\nclass ConnectedOverlayScrollHandler {\n    constructor(element, listener = () => {}) {\n        this.element = element;\n        this.listener = listener;\n    }\n\n    bindScrollListener() {\n        this.scrollableParents = DomHandler.getScrollableParents(this.element);\n\n        for (let i = 0; i < this.scrollableParents.length; i++) {\n            this.scrollableParents[i].addEventListener('scroll', this.listener);\n        }\n    }\n\n    unbindScrollListener() {\n        if (this.scrollableParents) {\n            for (let i = 0; i < this.scrollableParents.length; i++) {\n                this.scrollableParents[i].removeEventListener('scroll', this.listener);\n            }\n        }\n    }\n\n    destroy() {\n        this.unbindScrollListener();\n        this.element = null;\n        this.listener = null;\n        this.scrollableParents = null;\n    }\n}\n\nfunction primebus() {\n    const allHandlers = new Map();\n\n    return {\n        on(type, handler) {\n            let handlers = allHandlers.get(type);\n\n            if (!handlers) handlers = [handler];\n            else handlers.push(handler);\n\n            allHandlers.set(type, handlers);\n        },\n\n        off(type, handler) {\n            let handlers = allHandlers.get(type);\n\n            if (handlers) {\n                handlers.splice(handlers.indexOf(handler) >>> 0, 1);\n            }\n        },\n\n        emit(type, evt) {\n            let handlers = allHandlers.get(type);\n\n            if (handlers) {\n                handlers.slice().map((handler) => {\n                    handler(evt);\n                });\n            }\n        }\n    };\n}\n\nvar ObjectUtils = {\n    equals(obj1, obj2, field) {\n        if (field) return this.resolveFieldData(obj1, field) === this.resolveFieldData(obj2, field);\n        else return this.deepEquals(obj1, obj2);\n    },\n\n    deepEquals(a, b) {\n        if (a === b) return true;\n\n        if (a && b && typeof a == 'object' && typeof b == 'object') {\n            var arrA = Array.isArray(a),\n                arrB = Array.isArray(b),\n                i,\n                length,\n                key;\n\n            if (arrA && arrB) {\n                length = a.length;\n                if (length != b.length) return false;\n                for (i = length; i-- !== 0; ) if (!this.deepEquals(a[i], b[i])) return false;\n\n                return true;\n            }\n\n            if (arrA != arrB) return false;\n\n            var dateA = a instanceof Date,\n                dateB = b instanceof Date;\n\n            if (dateA != dateB) return false;\n            if (dateA && dateB) return a.getTime() == b.getTime();\n\n            var regexpA = a instanceof RegExp,\n                regexpB = b instanceof RegExp;\n\n            if (regexpA != regexpB) return false;\n            if (regexpA && regexpB) return a.toString() == b.toString();\n\n            var keys = Object.keys(a);\n\n            length = keys.length;\n\n            if (length !== Object.keys(b).length) return false;\n\n            for (i = length; i-- !== 0; ) if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n\n            for (i = length; i-- !== 0; ) {\n                key = keys[i];\n                if (!this.deepEquals(a[key], b[key])) return false;\n            }\n\n            return true;\n        }\n\n        return a !== a && b !== b;\n    },\n\n    resolveFieldData(data, field) {\n        if (data && Object.keys(data).length && field) {\n            if (this.isFunction(field)) {\n                return field(data);\n            } else if (field.indexOf('.') === -1) {\n                return data[field];\n            } else {\n                let fields = field.split('.');\n                let value = data;\n\n                for (var i = 0, len = fields.length; i < len; ++i) {\n                    if (value == null) {\n                        return null;\n                    }\n\n                    value = value[fields[i]];\n                }\n\n                return value;\n            }\n        } else {\n            return null;\n        }\n    },\n\n    isFunction(obj) {\n        return !!(obj && obj.constructor && obj.call && obj.apply);\n    },\n\n    getItemValue(obj, ...params) {\n        return this.isFunction(obj) ? obj(...params) : obj;\n    },\n\n    filter(value, fields, filterValue) {\n        var filteredItems = [];\n\n        if (value) {\n            for (let item of value) {\n                for (let field of fields) {\n                    if (String(this.resolveFieldData(item, field)).toLowerCase().indexOf(filterValue.toLowerCase()) > -1) {\n                        filteredItems.push(item);\n                        break;\n                    }\n                }\n            }\n        }\n\n        return filteredItems;\n    },\n\n    reorderArray(value, from, to) {\n        if (value && from !== to) {\n            if (to >= value.length) {\n                to %= value.length;\n                from %= value.length;\n            }\n\n            value.splice(to, 0, value.splice(from, 1)[0]);\n        }\n    },\n\n    findIndexInList(value, list) {\n        let index = -1;\n\n        if (list) {\n            for (let i = 0; i < list.length; i++) {\n                if (list[i] === value) {\n                    index = i;\n                    break;\n                }\n            }\n        }\n\n        return index;\n    },\n\n    contains(value, list) {\n        if (value != null && list && list.length) {\n            for (let val of list) {\n                if (this.equals(value, val)) return true;\n            }\n        }\n\n        return false;\n    },\n\n    insertIntoOrderedArray(item, index, arr, sourceArr) {\n        if (arr.length > 0) {\n            let injected = false;\n\n            for (let i = 0; i < arr.length; i++) {\n                let currentItemIndex = this.findIndexInList(arr[i], sourceArr);\n\n                if (currentItemIndex > index) {\n                    arr.splice(i, 0, item);\n                    injected = true;\n                    break;\n                }\n            }\n\n            if (!injected) {\n                arr.push(item);\n            }\n        } else {\n            arr.push(item);\n        }\n    },\n\n    removeAccents(str) {\n        if (str && str.search(/[\\xC0-\\xFF]/g) > -1) {\n            str = str\n                .replace(/[\\xC0-\\xC5]/g, 'A')\n                .replace(/[\\xC6]/g, 'AE')\n                .replace(/[\\xC7]/g, 'C')\n                .replace(/[\\xC8-\\xCB]/g, 'E')\n                .replace(/[\\xCC-\\xCF]/g, 'I')\n                .replace(/[\\xD0]/g, 'D')\n                .replace(/[\\xD1]/g, 'N')\n                .replace(/[\\xD2-\\xD6\\xD8]/g, 'O')\n                .replace(/[\\xD9-\\xDC]/g, 'U')\n                .replace(/[\\xDD]/g, 'Y')\n                .replace(/[\\xDE]/g, 'P')\n                .replace(/[\\xE0-\\xE5]/g, 'a')\n                .replace(/[\\xE6]/g, 'ae')\n                .replace(/[\\xE7]/g, 'c')\n                .replace(/[\\xE8-\\xEB]/g, 'e')\n                .replace(/[\\xEC-\\xEF]/g, 'i')\n                .replace(/[\\xF1]/g, 'n')\n                .replace(/[\\xF2-\\xF6\\xF8]/g, 'o')\n                .replace(/[\\xF9-\\xFC]/g, 'u')\n                .replace(/[\\xFE]/g, 'p')\n                .replace(/[\\xFD\\xFF]/g, 'y');\n        }\n\n        return str;\n    },\n\n    getVNodeProp(vnode, prop) {\n        let props = vnode.props;\n\n        if (props) {\n            let kebapProp = prop.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n            let propName = Object.prototype.hasOwnProperty.call(props, kebapProp) ? kebapProp : prop;\n\n            return vnode.type.props[prop].type === Boolean && props[propName] === '' ? true : props[propName];\n        }\n\n        return null;\n    },\n\n    convertToFlatCase(str) {\n        // convert snake, kebab, camel and pascal cases to flat case\n        return this.isNotEmpty(str) ? str.replace(/(-|_)/g, '').toLowerCase() : str;\n    },\n\n    isEmpty(value) {\n        return value === null || value === undefined || value === '' || (Array.isArray(value) && value.length === 0) || (!(value instanceof Date) && typeof value === 'object' && Object.keys(value).length === 0);\n    },\n\n    isNotEmpty(value) {\n        return !this.isEmpty(value);\n    },\n\n    isPrintableCharacter(char = '') {\n        return this.isNotEmpty(char) && char.length === 1 && char.match(/\\S| /);\n    },\n\n    /**\n     * Firefox-v103 does not currently support the \"findLast\" method. It is stated that this method will be supported with Firefox-v104.\n     * https://caniuse.com/mdn-javascript_builtins_array_findlast\n     */\n    findLast(arr, callback) {\n        let item;\n\n        if (this.isNotEmpty(arr)) {\n            try {\n                item = arr.findLast(callback);\n            } catch {\n                item = [...arr].reverse().find(callback);\n            }\n        }\n\n        return item;\n    },\n\n    /**\n     * Firefox-v103 does not currently support the \"findLastIndex\" method. It is stated that this method will be supported with Firefox-v104.\n     * https://caniuse.com/mdn-javascript_builtins_array_findlastindex\n     */\n    findLastIndex(arr, callback) {\n        let index = -1;\n\n        if (this.isNotEmpty(arr)) {\n            try {\n                index = arr.findLastIndex(callback);\n            } catch {\n                index = arr.lastIndexOf([...arr].reverse().find(callback));\n            }\n        }\n\n        return index;\n    }\n};\n\nvar lastId = 0;\n\nfunction UniqueComponentId (prefix = 'pv_id_') {\n    lastId++;\n\n    return `${prefix}${lastId}`;\n}\n\nfunction handler() {\n    let zIndexes = [];\n\n    const generateZIndex = (key, autoZIndex, baseZIndex = 999) => {\n        const lastZIndex = getLastZIndex(key, autoZIndex, baseZIndex);\n        const newZIndex = lastZIndex.value + (lastZIndex.key === key ? 0 : baseZIndex) + 1;\n\n        zIndexes.push({ key, value: newZIndex });\n\n        return newZIndex;\n    };\n\n    const revertZIndex = (zIndex) => {\n        zIndexes = zIndexes.filter((obj) => obj.value !== zIndex);\n    };\n\n    const getCurrentZIndex = (key, autoZIndex) => {\n        return getLastZIndex(key, autoZIndex).value;\n    };\n\n    const getLastZIndex = (key, autoZIndex, baseZIndex = 0) => {\n        return [...zIndexes].reverse().find((obj) => (autoZIndex ? true : obj.key === key)) || { key, value: baseZIndex };\n    };\n\n    const getZIndex = (el) => {\n        return el ? parseInt(el.style.zIndex, 10) || 0 : 0;\n    };\n\n    return {\n        get: getZIndex,\n        set: (key, el, baseZIndex) => {\n            if (el) {\n                el.style.zIndex = String(generateZIndex(key, true, baseZIndex));\n            }\n        },\n        clear: (el) => {\n            if (el) {\n                revertZIndex(getZIndex(el));\n                el.style.zIndex = '';\n            }\n        },\n        getCurrent: (key) => getCurrentZIndex(key, true)\n    };\n}\n\nvar ZIndexUtils = handler();\n\nexport { ConnectedOverlayScrollHandler, DomHandler, primebus as EventBus, ObjectUtils, UniqueComponentId, ZIndexUtils };\n"],
  "mappings": ";AAqqBA,SAAS,WAAW;AAChB,QAAM,cAAc,oBAAI,IAAI;AAE5B,SAAO;AAAA,IACH,GAAG,MAAMA,UAAS;AACd,UAAI,WAAW,YAAY,IAAI,IAAI;AAEnC,UAAI,CAAC;AAAU,mBAAW,CAACA,QAAO;AAAA;AAC7B,iBAAS,KAAKA,QAAO;AAE1B,kBAAY,IAAI,MAAM,QAAQ;AAAA,IAClC;AAAA,IAEA,IAAI,MAAMA,UAAS;AACf,UAAI,WAAW,YAAY,IAAI,IAAI;AAEnC,UAAI,UAAU;AACV,iBAAS,OAAO,SAAS,QAAQA,QAAO,MAAM,GAAG,CAAC;AAAA,MACtD;AAAA,IACJ;AAAA,IAEA,KAAK,MAAM,KAAK;AACZ,UAAI,WAAW,YAAY,IAAI,IAAI;AAEnC,UAAI,UAAU;AACV,iBAAS,MAAM,EAAE,IAAI,CAACA,aAAY;AAC9B,UAAAA,SAAQ,GAAG;AAAA,QACf,CAAC;AAAA,MACL;AAAA,IACJ;AAAA,EACJ;AACJ;AA+QA,SAAS,UAAU;AACf,MAAI,WAAW,CAAC;AAEhB,QAAM,iBAAiB,CAAC,KAAK,YAAY,aAAa,QAAQ;AAC1D,UAAM,aAAa,cAAc,KAAK,YAAY,UAAU;AAC5D,UAAM,YAAY,WAAW,SAAS,WAAW,QAAQ,MAAM,IAAI,cAAc;AAEjF,aAAS,KAAK,EAAE,KAAK,OAAO,UAAU,CAAC;AAEvC,WAAO;AAAA,EACX;AAEA,QAAM,eAAe,CAAC,WAAW;AAC7B,eAAW,SAAS,OAAO,CAAC,QAAQ,IAAI,UAAU,MAAM;AAAA,EAC5D;AAEA,QAAM,mBAAmB,CAAC,KAAK,eAAe;AAC1C,WAAO,cAAc,KAAK,UAAU,EAAE;AAAA,EAC1C;AAEA,QAAM,gBAAgB,CAAC,KAAK,YAAY,aAAa,MAAM;AACvD,WAAO,CAAC,GAAG,QAAQ,EAAE,QAAQ,EAAE,KAAK,CAAC,QAAS,aAAa,OAAO,IAAI,QAAQ,GAAI,KAAK,EAAE,KAAK,OAAO,WAAW;AAAA,EACpH;AAEA,QAAM,YAAY,CAAC,OAAO;AACtB,WAAO,KAAK,SAAS,GAAG,MAAM,QAAQ,EAAE,KAAK,IAAI;AAAA,EACrD;AAEA,SAAO;AAAA,IACH,KAAK;AAAA,IACL,KAAK,CAAC,KAAK,IAAI,eAAe;AAC1B,UAAI,IAAI;AACJ,WAAG,MAAM,SAAS,OAAO,eAAe,KAAK,MAAM,UAAU,CAAC;AAAA,MAClE;AAAA,IACJ;AAAA,IACA,OAAO,CAAC,OAAO;AACX,UAAI,IAAI;AACJ,qBAAa,UAAU,EAAE,CAAC;AAC1B,WAAG,MAAM,SAAS;AAAA,MACtB;AAAA,IACJ;AAAA,IACA,YAAY,CAAC,QAAQ,iBAAiB,KAAK,IAAI;AAAA,EACnD;AACJ;AAEA,IAAI,cAAc,QAAQ;",
  "names": ["handler"]
}
